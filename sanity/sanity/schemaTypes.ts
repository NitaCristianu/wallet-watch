/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: "sanity.imagePaletteSwatch";
    background?: string;
    foreground?: string;
    population?: number;
    title?: string;
};

export type SanityImagePalette = {
    _type: "sanity.imagePalette";
    darkMuted?: SanityImagePaletteSwatch;
    lightVibrant?: SanityImagePaletteSwatch;
    darkVibrant?: SanityImagePaletteSwatch;
    vibrant?: SanityImagePaletteSwatch;
    dominant?: SanityImagePaletteSwatch;
    lightMuted?: SanityImagePaletteSwatch;
    muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
    _type: "sanity.imageDimensions";
    height?: number;
    width?: number;
    aspectRatio?: number;
};

export type SanityImageHotspot = {
    _type: "sanity.imageHotspot";
    x?: number;
    y?: number;
    height?: number;
    width?: number;
};

export type SanityImageCrop = {
    _type: "sanity.imageCrop";
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
};

export type SanityFileAsset = {
    _id: string;
    _type: "sanity.fileAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
    _id: string;
    _type: "sanity.imageAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    metadata?: SanityImageMetadata;
    source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
    _type: "sanity.imageMetadata";
    location?: Geopoint;
    dimensions?: SanityImageDimensions;
    palette?: SanityImagePalette;
    lqip?: string;
    blurHash?: string;
    hasAlpha?: boolean;
    isOpaque?: boolean;
};

export type Geopoint = {
    _type: "geopoint";
    lat?: number;
    lng?: number;
    alt?: number;
};

export type Slug = {
    _type: "slug";
    current?: string;
    source?: string;
};

export type SanityAssetSourceData = {
    _type: "sanity.assetSourceData";
    name?: string;
    id?: string;
    url?: string;
};

export type Action = {
    _type: "action";
    title?: string;
    description?: string;
    currency?: string;
    ammount?: number;
    other?: string;
    color?: string;
    frequency?: number;
    type?: "commit" | "transfer" | "goal";
    date1?: string;
    id?: string;
    date2?: string;
};

export type Project = {
    _id: string;
    _type: "project";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    user?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "user";
    };
    currency?: string;
    Dedication?: number;
    dailybudget?: number;
    actions?: Array<
        {
            _key: string;
        } & Action
    >;
};

export type User = {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    email?: string;
    image?: string;
    createdAt?: string;
};

export type Markdown = string;

export type AllSanitySchemaTypes =
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | SanityImageHotspot
    | SanityImageCrop
    | SanityFileAsset
    | SanityImageAsset
    | SanityImageMetadata
    | Geopoint
    | Slug
    | SanityAssetSourceData
    | Action
    | Project
    | User
    | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: USER_BY_EMAIL
// Query: *[_type == "user" && email == $email][0]{    _id,    name,    email,    image,}
export type USER_BY_EMAILResult = {
    _id: string;
    name: string | null;
    email: string | null;
    image: string | null;
} | null;
// Variable: PROJECTS_BY_USER
// Query: *[_type == "project" && user._ref == $userId]{  _id,  title,  "user": user->{    _id,    name,    email  }}
export type PROJECTS_BY_USERResult = Array<{
    _id: string;
    title: string | null;
    user: {
        _id: string;
        name: string | null;
        email: string | null;
    } | null;
}>;
// Variable: PROJECT_BY_ID
// Query: *[_type == "project" && _id == $projectId][0]{    _id,    title,    dedication,    currency,    dailybudget,    "user": user->{      _id,      name,      email    }  }
export type PROJECT_BY_IDResult = {
    _id: string;
    title: string | null;
    dedication: null;
    currency: string | null;
    dailybudget: number | null;
    user: {
        _id: string;
        name: string | null;
        email: string | null;
    } | null;
} | null;
// Variable: ACTIONS_BY_PROJECT_ID
// Query: *[_type == "project" && _id == $projectId][0]{    actions[]{      _key,      _type,      title,      description,      currency,      ammount,      frequency,      other,      color,      type,      date1,      date2,      id,    }  }
export type ACTIONS_BY_PROJECT_IDResult = {
    actions: Array<{
        _key: string;
        _type: "action";
        title: string | null;
        description: string | null;
        currency: string | null;
        ammount: number | null;
        frequency: number | null;
        other: string | null;
        color: string | null;
        type: "commit" | "goal" | "transfer" | null;
        date1: string | null;
        date2: string | null;
        id: string | null;
    }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
    interface SanityQueries {
        '*[_type == "user" && email == $email][0]{\n    _id,\n    name,\n    email,\n    image,\n}': USER_BY_EMAILResult;
        '\n*[_type == "project" && user._ref == $userId]{\n  _id,\n  title,\n  "user": user->{\n    _id,\n    name,\n    email\n  }\n}': PROJECTS_BY_USERResult;
        '\n  *[_type == "project" && _id == $projectId][0]{\n    _id,\n    title,\n    dedication,\n    currency,\n    dailybudget,\n    "user": user->{\n      _id,\n      name,\n      email\n    }\n  }\n': PROJECT_BY_IDResult;
        '\n  *[_type == "project" && _id == $projectId][0]{\n    actions[]{\n      _key,\n      _type,\n      title,\n      description,\n      currency,\n      ammount,\n      frequency,\n      other,\n      color,\n      type,\n      date1,\n      date2,\n      id,\n    }\n  }\n': ACTIONS_BY_PROJECT_IDResult;
    }
}
